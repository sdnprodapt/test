{% set ports = data['ports'] %}
{% set allowed_ports = ['xe', 'ge', 'et', 'lt', 'sp'] %}
[
{% for port in ports if port['name'].strip().split('-', 1)[0] in allowed_ports recursive %}
    {% set name = port['name']|string|trim %}
    {% set speed = port['speed']|string|trim %}
    {% set mac = port['current-physical-address'] if 'current-physical-address' in port else '' %}
    {
        "name": "{{ name }}",
        "link_level_type": "{{ port['link-level-type']|trim|default('') }}",
        "speed": "{{ speed }}",
        {# If admin-status is ever not a dict, this will be a problem #}
        "admin_status": {{ 'true' if 'up' in port['admin-status']['#text'] else 'false' }},
        "oper_status": {{ 'true' if 'up' in port['oper-status'] else 'false' }},
        "mtu": "{{ port['mtu']|trim|default('') }}",
        {# Some devices have xml formatting information on their mac address and this gets around that #}
        "mac_address": "{{ mac['#text']|trim or mac|trim }}"
    {# Suuuper hacky #}
    {% set vports = port['logical-interface'] if port['logical-interface'].__class__ == [].__class__ else
                    [port['logical-interface']] if port['logical-interface'].__class__ == {}.__class__ else [] %}
    }{% if not loop.last or vports|length > 0 %},{% endif %}
    {% if port['logical-interface']|default([]) %}
        {% set outer_loop = loop %}
        {% for vport in vports %}
            {
                "name": "{{ vport['name']|string|trim }}",
                "physical_interface": "{{ name }}", {# This field only here for logical interfces to give a reference to their parent phycsial interfaces #}
                "link_level_type": "virtual", {# This shows that this device is a logical-interface #}
                "mtu": "{{ vport['address-family']['mtu'] }}",
                {# For now these parameters will be the same as the parent physical port #}
                "speed": "{{ speed }}",
                "admin_status": {{ 'true' if 'up' in port['admin-status']['#text'] else 'false' }},
                "oper_status": {{ 'true' if 'up' in port['oper-status'] else 'false' }},
                "mac_address": "{{ mac['#text']|trim or mac|trim }}",
                {% set allowed_families = ['inet'] %}
                {% set address_families = vport['address-family'] if vport['address-family'].__class__ == [].__class__ else
                    [vport['address-family']] if vport['address-family'].__class__ == {}.__class__ else [] %}
                "ipv4_addresses": [
                    {% for fam in address_families %}
                        {% if fam['address-family-name'] in allowed_families and fam['interface-address'] %}
                            {% set ifc_addrs = fam['interface-address'] if fam['interface-address'].__class__ == [].__class__ else
                                [fam['interface-address']] if fam['interface-address'].__class__ == {}.__class__ else [] %}
                            {% for addr in ifc_addrs %}
                                {% set getprefix = addr.get('ifa-destination') and '/' in addr['ifa-destination'] %}
                                {% set prefixl = addr['ifa-destination'].split('/')[1] if getprefix else '32' %}
                                {% set address = '{}/{}'.format(addr['ifa-local'], prefixl) %}
                                {% if not loop.first %},{% endif %}"{{ address }}"
                            {% endfor %}
                        {% endif %}
                    {% endfor %}
                ],
                "security_zone": "{{ vport['logical-interface-zone-name']|string|trim|default('') }}"
            }{% if not loop.last or not outer_loop.last %},{% endif %}
        {% endfor %}
    {% endif %}
{% endfor %}
]